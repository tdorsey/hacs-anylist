# Docker Compose configuration for HACS AnyList - Development Environment
# This configuration is designed to support the TypeScript conversion project
# and provides a development environment with hot reload capabilities.
#
# Usage:
#   Development: docker-compose up
#   Production:  docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
#
# Related to TypeScript conversion issue: #1

services:
  # Main application service - currently Python, designed to support future TypeScript/Node.js
  hacs-anylist:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: hacs-anylist-dev
    ports:
      - "3000:3000"    # Future Node.js/TypeScript server port
      - "8123:8123"    # Home Assistant development port (if needed)
    volumes:
      # Mount source code for hot reload during development
      - .:/app
      - /app/node_modules  # Prevent overwriting node_modules with host volume
      # Mount Home Assistant config directory (when applicable)
      - ${HOME_ASSISTANT_CONFIG_PATH:-./config}:/config
    environment:
      - NODE_ENV=development
      - DEBUG=hacs-anylist:*
      - CHOKIDAR_USEPOLLING=true  # Enable file watching in Docker
      # Home Assistant related environment variables
      - HASS_SERVER_HOST=${HASS_SERVER_HOST:-127.0.0.1}
      - HASS_SERVER_PORT=${HASS_SERVER_PORT:-8123}
      - HASS_TOKEN=${HASS_TOKEN:-}
      # AnyList integration settings
      - ANYLIST_SERVER_ADDR=${ANYLIST_SERVER_ADDR:-}
      - ANYLIST_DEFAULT_LIST=${ANYLIST_DEFAULT_LIST:-Shopping}
    env_file:
      - .env              # Load environment variables from .env file
      - .env.development  # Development-specific overrides
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - hacs-anylist-network
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: hacs-anylist-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-defaultpassword}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - hacs-anylist-network
    deploy:
      resources:
        limits:
          memory: 256M

  # PostgreSQL for data persistence (future use)
  postgres:
    image: postgres:15-alpine
    container_name: hacs-anylist-postgres-dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-hacs_anylist}
      - POSTGRES_USER=${POSTGRES_USER:-hacs_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-defaultpassword}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hacs_user} -d ${POSTGRES_DB:-hacs_anylist}"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - hacs-anylist-network
    deploy:
      resources:
        limits:
          memory: 512M

  # Development tools container (optional)
  dev-tools:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: dev-tools
    container_name: hacs-anylist-dev-tools
    volumes:
      - .:/app
    environment:
      - NODE_ENV=development
    command: tail -f /dev/null  # Keep container running
    restart: unless-stopped
    networks:
      - hacs-anylist-network
    profiles:
      - dev-tools  # Only start when explicitly requested

# Named volumes for data persistence
volumes:
  redis_data:
    driver: local
    name: hacs-anylist-redis-data-dev
  postgres_data:
    driver: local  
    name: hacs-anylist-postgres-data-dev

# Custom network for service communication
networks:
  hacs-anylist-network:
    driver: bridge
    name: hacs-anylist-network-dev